import pprint

from aiogram import F, Router
from aiogram.types import Message, TelegramObject, ChatFullInfo, BotCommand, ReactionTypeEmoji
from aiogram.filters import CommandStart, Command
from aiogram.enums.parse_mode import ParseMode

import configparser

from typing import Callable
import sys
import json

from config.parser_config_admin import (get_status_bot, set_active_bot,
                                        set_inactive_bot, get_owner_user_id)

router = Router()


def check_user(user_id_message: int) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    :param user_id_message: int user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –±–æ—Ç—É
    :return: true - –¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, false - –∑–∞–ø—Ä–µ—Ç
    """
    user_id_owner = get_owner_user_id()
    return user_id_message == user_id_owner


@router.message(Command(commands=["act_bot"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_active_bot()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text="–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=["dis_bot"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_inactive_bot()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=["get_status_bot"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        current_status = int(get_status_bot())
        if current_status == 0:
            await message.reply(text="–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            emoji_got_it = ReactionTypeEmoji(emoji='üò¥')
            await message.react(reaction=[emoji_got_it])
        elif current_status == 1:
            await message.reply(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            emoji_got_it = ReactionTypeEmoji(emoji='üë®‚Äçüíª')
            await message.react(reaction=[emoji_got_it])


@router.message(Command(commands=["get_config"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        conf = configparser.ConfigParser()
        conf.read('config/config.ini')
        str_f = (f"[ACTIVE_BOT]:\n"
                 f"is_active_bot: {conf['ACTIVE_BOT']['is_active_bot']}\n\n"
                 f"[ACTIVE_CHAT_BOT]:\n"
                 f"is_active_business: {conf['ACTIVE_CHAT_BOT']['is_active_business']}")
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text=str_f, parse_mode=ParseMode.HTML)


@router.message(Command(commands=["exit"], prefix="~"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        emoji_got_it = ReactionTypeEmoji(emoji='üò¥')
        await message.react(reaction=[emoji_got_it])
        await message.reply(text="–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        sys.exit(__status=1)


@router.message(Command(commands=["cmd_bot"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        str_f_cmd = (f"<u>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</u>:\n\n"
                     f"<b>act_bot</b> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
                     f"<b>dis_bot</b> - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞;\n"
                     f"<b>get_status_bot</b> - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞;\n"
                     f"<b>get_config</b> - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö;\n"
                     f"<b>exit</b> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ;")
        await message.reply(text=str_f_cmd, parse_mode=ParseMode.HTML)
