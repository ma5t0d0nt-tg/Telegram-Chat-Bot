import types

from aiogram import F, Router
from aiogram.types import Message, TelegramObject, ChatFullInfo, BotCommand, ReactionTypeEmoji, FSInputFile, \
    CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.enums.parse_mode import ParseMode

import configparser

from typing import Callable
import sys
import os
import json

from config.parser_config_business import get_active_business, set_active_business, set_inactive_business
from config.parser_config_admin import get_owner_user_id
from sqlite import db_start, get_all_record, get_all_chats, delete_message, delete_all_message, db_stop

router = Router()


def check_user(user_id_message: int) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    :param user_id_message: int user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –±–æ—Ç—É
    :return: true - –¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, false - –∑–∞–ø—Ä–µ—Ç
    """
    user_id_owner = get_owner_user_id()
    return user_id_message == user_id_owner


@router.message(Command(commands=["act_bus"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_active_business()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react([emoji_got_it])
        await message.reply(text="–ß–∞—Ç-–±–æ—Ç –≤–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=["dis_bus"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        set_inactive_business()
        emoji_got_it = ReactionTypeEmoji(emoji='üëç')
        await message.react([emoji_got_it])
        await message.reply(text="–ß–∞—Ç-–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


@router.message(Command(commands=["get_status_bus"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        current_status = int(get_active_business())
        if current_status == 0:
            await message.reply(text="–ß–∞—Ç-–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            emoji_got_it = ReactionTypeEmoji(emoji='üò¥')
            await message.react([emoji_got_it])
        elif current_status == 1:
            await message.reply(text="–ß–∞—Ç-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            emoji_got_it = ReactionTypeEmoji(emoji='üë®‚Äçüíª')
            await message.react([emoji_got_it])


@router.message(Command(commands=["get_file_db_size"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        file_size_byte = os.path.getsize("messages.db")
        file_size_kbyte = file_size_byte / 1024
        await message.reply(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {file_size_kbyte} –ö–ë")


@router.message(Command(commands=["get_count_record"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        await db_start()
        count = await get_all_record()
        await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {count[0][0]}")


@router.message(Command(commands=["get_all_chats"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        await db_start()
        chats = await get_all_chats()
        for chat in chats:
            await message.reply(text=f"id: {chat[0]}\nuser_id: {chat[1]}\n"
                                     f"num_question: {chat[2]}\nanswer: {chat[3]}\n")
        await db_stop()


@router.message(F.text.startswith("del"))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        id_msg = message.text.split(" ")[1].strip()
        await db_start()
        await delete_message(id_message=id_msg)
        await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å id = {id_msg} —É–¥–∞–ª–µ–Ω–æ")
        await db_stop()


@router.message(Command(commands=["del_all"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        await db_start()
        await delete_all_message()
        await message.reply("–í—Å–µ —Å–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        await db_stop()


@router.message(Command(commands=["cmd_bus"], prefix="."))
async def handler(message: Message):
    is_owner = check_user(user_id_message=message.from_user.id)
    if is_owner:
        str_f_cmd = (f"<u>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞</u>:\n\n"
                     f"<b>act_bus</b> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>dis_bus</b> - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>get_status_bus</b> - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>get_file_db_size</b> - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>get_count_record</b> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –æ—Ç —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>get_all_chats</b> - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –æ—Ç —á–∞—Ç-–±–æ—Ç–∞;\n"
                     f"<b>get_file_db</b> - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö;\n"
                     f"<b>del –•</b> - —É–¥–∞–ª–∏—Ç—å –µ–¥–µ–Ω–∏—á–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ;\n"
                     f"<b>del_all</b> - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ;")
        await message.reply(text=str_f_cmd, parse_mode=ParseMode.HTML)
